1.单一职责原则：
类或者接口设计要做到只有一个和原因引起变化,也就是设计过程中接口、类、方法只负责一个独立的职责

2.里氏替换原则:
只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，
有子类出现的地方，父类未必就能适应

3.依赖倒置原则：
模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的；
接口或抽象类不依赖于实现类；
实现类依赖接口或抽象类。

4.接口隔离原则：
接口尽量细化,同时接口中的方法尽量少,做到每个接口只提供刚需的方法

5.迪米特法制：
一个对象应该对其他对象有最少的了解
通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提
供的这么多public方法，我就调用这么多，其他的我一概不关心

6.开闭原则：
一个软件实体如类、模块和函数应该对扩展开放，对修改关闭
